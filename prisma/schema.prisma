generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  RoleAccessRequest RoleAccessRequest[]
  users             User[]
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  fullName          String
  mobileNumber      String?
  gender            String?
  profilePicture    String?
  roleId            Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  appleId           String?             @unique
  accessLogs        AccessLog[]
  auditLogs         AuditLog[]
  CompanyBranding   CompanyBranding[]
  Document          Document[]
  otps              Otp[]
  RoleAccessRequest RoleAccessRequest[]
  trainingTrackers  TrainingTracker[]
  role              Role                @relation(fields: [roleId], references: [id])
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  browser   String
  city      String
  country   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoleAccessRequest {
  id              Int      @id @default(autoincrement())
  userId          Int
  requestedRoleId Int
  status          String
  createdAt       DateTime @default(now())
  requestedRole   Role     @relation(fields: [requestedRoleId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompanyBranding {
  id                    Int               @id @default(autoincrement())
  name                  String
  documentControlNumber String
  logo                  String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  userId                Int?
  user                  User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Document              Document[]
  trainingTrackers      TrainingTracker[]
}

model Document {
  id                Int             @id @default(autoincrement())
  userId            Int
  companyBrandingId Int
  category          String
  subCategory       String
  inputsJson        String
  generatedContent  String?
  gcpFileUrl        String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  status            String?         @default("open")
  companyBranding   CompanyBranding @relation(fields: [companyBrandingId], references: [id])
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  userId       Int
  action       String
  documentType String
  documentId   Int
  details      Json?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrainingTracker {
  id                      Int              @id @default(autoincrement())
  userId                  Int
  companyBrandingId       Int?
  employeeName            String
  employeeIdNumber        String?
  trainingType            String
  trainingTopic           String
  dateAndTime             DateTime
  trainingHours           String
  trainingGivenBy         String
  certificateNumber       String?
  certificationName       String?
  certificationExpiryDate DateTime?
  certificationStatus     String?
  location                String?
  trainingEvidence        String[] // Array of file URLs for internal training
  certificateFiles        String[] // Array of certificate file URLs for external training
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  companyBranding         CompanyBranding? @relation(fields: [companyBrandingId], references: [id])
  user                    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}
